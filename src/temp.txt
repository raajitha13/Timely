import React, { useState, useContext, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import GlobalContext from '../context/GlobalContext.js';
import dayjs from 'dayjs';

export default function Charts(){

  const {savedEvents} = useContext(GlobalContext);

  const weekOptions = {
      xAxis: {
        type: 'category',
        data: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
      },
      yAxis: {
        type: 'value',
        min: 0,
        max:3000
      },
      series: [
        {
          data: [0, 0, 0, 0, 0, 0, 0],
          type: 'bar'
        }
      ]
    };

    const [options, setOptions] = useState(weekOptions);

    const year = dayjs().year();
    const month = dayjs().month();
    const currentDay = dayjs().day();

    const [currentWeek, setCurrentWeek ] = useState(0);
    const [startOfWeek, setStartOfWeek] = useState(new Date(year, month, dayjs().format('DD')-currentDay));
    const [endOfWeek, setEndOfWeek] = useState(new Date(year, month, dayjs().format('DD')-currentDay+6));

    useEffect(()=>{
      for(let i=0;i<7;i++)
        weekOptions.series[0].data[i] = 0;
      // console.log(weekOptions.series[0]);
      savedEvents.map((evt)=>{
        // console.log(dayjs(evt.day).format('ddd'));

        let day = dayjs(evt.day).format('ddd');
        let date = new Date(evt.day);
        let evtTime = evt.timeSpent;

        let sow = new Date(year, month, dayjs().format('DD')-currentDay+(currentWeek*7));
        let eow = new Date(year, month, dayjs().format('DD')-currentDay+6+(currentWeek*7));
        setStartOfWeek(sow);
        setEndOfWeek(eow);

        console.log(startOfWeek, " ", endOfWeek, " ", date, " ", (date>=startOfWeek && date<=endOfWeek), " ", day);
        // console.log(dayjs().format('DD')-currentDay+6);

        if( date>=sow && date<=eow )
        {
          switch (day) {
              case "Sun": weekOptions.series[0].data[0]+=evtTime;
                          break;
              case "Mon": weekOptions.series[0].data[1]+=evtTime;
                          break;
              case "Tue": weekOptions.series[0].data[2]+=evtTime;
                          break;
              case "Wed": weekOptions.series[0].data[3]+=evtTime;
                          break;
              case "Thu": weekOptions.series[0].data[4]+=evtTime;
                          break;
              case "Fri": weekOptions.series[0].data[5]+=evtTime;
                          break;
              case "Sat": weekOptions.series[0].data[6]+=evtTime;
                          break;
              default:
            }
       }
      })
      setOptions(weekOptions);
    }, [savedEvents, currentWeek]);

    function handlePrevWeek(){
      setCurrentWeek(currentWeek-1);
    }

    function handleNextWeek(){
      setCurrentWeek(currentWeek+1);
    }

    function handleReset(){
      setCurrentWeek(0);
    }

  return(
    <div className="">
        <header className="ml-20 mt-5 px-4 py-5 flex items-center">

        <button onClick={handlePrevWeek}>
            <span className="material-icons-outlined cursor-pointer text-gray-600 pt-2 mx-2">
              chevron_left
            </span>
          </button>

            <span className="text-gray-600 text-2xl cursor-pointer" onClick={handleReset}>Weekly Insights</span>

          <button onClick={handleNextWeek}>
            <span className="material-icons-outlined cursor-pointer text-gray-600 pt-2 mx-2">
              chevron_right
            </span>
          </button>
          {/*<button className="border rounded py-2 px-4 ml-5 mr-5" >Today</button>*/}

          <div>
            <span>{startOfWeek.toLocaleDateString('pt-PT')} - {endOfWeek.toLocaleDateString('pt-PT')}</span>
          </div>

      </header>

      <ReactECharts option={options} />
    </div>
  );
}
